mode: sequential

length: [20, 30]

splits:
  train: {path: "data/train", samples: 160}
  val:   {path: "data/train", samples: 20}
  test:  {path: "data/test", samples: 20}

minizinc_prefix: |
  include "all_equal.mzn";

predicates:
  "p(A,B)": "A < B"
  "q(A,B,C,D,E)": "(all_equal([A,B,C,D,E]))"

formula: "G (p(Y,Z) -> F G q(T,U,V,W,X) )"

types:
  fmnist_t:
    bag: "fmnist/bag"
    boot: "fmnist/boot"
    coat: "fmnist/coat"
    dress: "fmnist/dress"
    pullover: "fmnist/pullover"
    sandal: "fmnist/sandal"
    shirt: "fmnist/shirt"
    sneaker: "fmnist/sneaker"
    top: "fmnist/top"
    trouser: "fmnist/trouser"

  fmnist_5_t:
    sandal: "fmnist/sandal"
    shirt: "fmnist/shirt"
    sneaker: "fmnist/sneaker"
    top: "fmnist/top"
    trouser: "fmnist/trouser"

  cifar_t:
    airplane: "cifar10/airplane"
    automobile: "cifar10/automobile"
    bird: "cifar10/bird"
    cat: "cifar10/cat"
    deer: "cifar10/deer"
    #dog: "cifar10/dog"
    #frog: "cifar10/frog"
    #horse: "cifar10/horse"
    #ship: "cifar10/ship"
    #truck: "cifar10/truck"

domains:
  Y: fmnist_t
  Z: {"default": fmnist_5_t, "test": fmnist_t}
  T: cifar_t
  U: cifar_t
  V: cifar_t
  W: cifar_t
  X: cifar_t

streams:
  T: -t
  U: -u
  V: -v
  W: -w
  X: -x
  Y: y
  Z: z

avoid_absorbing_state:
  accepting: { "exponential": 1e-3 }
  rejecting: { "exponential": 1e-3 }

truncate_on_absorbing:
  accepting: True
  rejecting: False

seed: 12345
patience: 1000